---
# ansiblefied http://askubuntu.com/questions/457528/how-do-i-create-an-efi-bootable-iso-of-a-customized-version-of-ubuntu
- name: Build Custom ISO
  hosts: all
  gather_facts: false

  vars:
    # default: http://releases.ubuntu.com//14.04/ubuntu-14.04.3-server-amd64.iso dest=/tmp/ubuntu-14.04.3-server-amd64.iso
    # can we use the mini iso instead?
    # http://archive.ubuntu.com/ubuntu/dists/trusty-updates/main/installer-amd64/current/images/netboot/mini.iso
    iso_distro: "ubuntu"
    iso_version: "14.04"
    iso_release: ".3"
    iso_flavor: "server"
    iso_arch: "amd64"
    iso_urlbase: "http://releases.ubuntu.com/"
    iso_basename: "{{ iso_distro }}-{{ iso_version }}{{ iso_release }}-{{ iso_flavor }}-{{ iso_arch }}"
    iso_name: "{{ iso_basename }}.iso"
    iso_url: "{{ iso_urlbase }}/{{ iso_version }}/{{ iso_name }}"

    workdir: /tmp
    # trailing / is important for rsync to copy the contents
    mounted_iso: "{{ workdir }}/mounted_iso/"
    new_iso: "{{ workdir }}/new_iso/"

    iso_dhcp: false
    iso_ip:  10.0.2.15
    iso_netmask: 255.255.255.0
    iso_gateway: 10.0.2.2
    iso_dns: 10.0.2.3
    iso_ntp: 10.0.2.2

    iso_username: stack
    iso_fullname: stack
    iso_encrypted_password: "$6$SvgLlx4z$NYZEdu.dtX8qtNNlJzB5wVeVK4G4SQsDrilolou3/xWXp/U.pD.EY/mvaG.dEkjQWl8knPLIXmGoK/Kn6zrR8."

  tasks:
    #- local_action: apt name=dumpet
    #- local_action: apt name=mkisofs
    - local_action: get_url url={{ iso_url }} dest={{ workdir }}/{{ iso_name }}
    - local_action: file state=directory path={{ mounted_iso }}
    - local_action: command sudo mount -o loop,ro {{ workdir }}/{{ iso_name }} {{ mounted_iso }}
      args:
        creates: "{{ mounted_iso }}/isolinux"
    - local_action: command rsync -av --delete {{ mounted_iso }} {{ new_iso }}

    # start the customisation
    - local_action: file dest="{{ new_iso }}/isolinux" mode=0775
    - local_action: copy content="en" dest="{{ new_iso }}/isolinux/lang"

    - local_action: file dest="{{ new_iso }}" mode=0775
    - local_action: copy src="files/{{ iso_distro }}/{{ iso_version }}/ks.preseed" dest="{{ new_iso }}/ks.preseed"
    - local_action: template src="templates/ks.cfg.j2" dest="{{ new_iso }}/ks.cfg"
    # EFI Boot
    - local_action: file dest="{{ new_iso }}/boot/grub" mode=0775
    - local_action: copy src="files/{{ iso_distro }}/{{ iso_version }}/boot/grub/grub.cfg" dest="{{ new_iso }}/boot/grub/grub.cfg"
    # MBR/Legacy Boot
    - local_action: file dest="{{ new_iso }}/isolinux" mode=0775
    - local_action: copy src="files/{{ iso_distro }}/{{ iso_version }}/isolinux/isolinux.cfg" dest="{{ new_iso }}/isolinux/isolinux.cfg"
    - local_action: copy src="files/{{ iso_distro }}/{{ iso_version }}/isolinux/txt.cfg" dest="{{ new_iso }}/isolinux/txt.cfg"

    # build the ISO
    - local_action: command sudo mkisofs -U -A "Custom1404" -V "Custom1404" -volset "Custom1404" -J -joliet-long -r -v -T -o ../Custom1404.iso -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -eltorito-alt-boot -e boot/grub/efi.img -no-emul-boot .
      args:
        chdir: "{{ new_iso }}"
      register: mkisofs

    - debug: var=mkisofs

    # verify the ISO
    - local_action: command dumpet -i "{{ new_iso }}/../Custom1404.iso"
